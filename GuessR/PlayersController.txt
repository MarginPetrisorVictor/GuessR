using GuessR.Data;
using GuessR.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.Win32;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace GuessR.Controllers
{
	[Route("Account")]
	public class PlayerController : Controller
	{
		private readonly UserManager<IdentityUser> userManager;
		private readonly RoleManager<IdentityRole> roleManager;
		private readonly IConfiguration _configuration;
		private readonly ApplicationDbContext databaseContext;

		public PlayerController(UserManager<IdentityUser> userManager,
			RoleManager<IdentityRole> roleManager,
			IConfiguration configuration,
			ApplicationDbContext applicationDbContext)
		{
			this.userManager = userManager;
			this.roleManager = roleManager;
			_configuration = configuration;
			databaseContext = applicationDbContext;
		}

		[HttpPost]
		[Route("login")]
		public async Task<IActionResult> Login([FromBody] Login loginModel)
		{
			var user = await userManager.FindByNameAsync(loginModel.Username);
			if (user != null && await userManager.CheckPasswordAsync(user, loginModel.Password))
			{
				var userRoles = await userManager.GetRolesAsync(user);

				var authClaims = new List<Claim>
				{
					new Claim(ClaimTypes.Name, user.UserName),
					new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
				};

				foreach (var userRole in userRoles)
				{
					authClaims.Add(new Claim(ClaimTypes.Role, userRole));
				}

				var authSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["JWT:Secret"]));

				var token = new JwtSecurityToken(
					issuer: _configuration["JWT:ValidIssuer"],
					audience: _configuration["JWT:ValidAudience"],
					expires: DateTime.Now.AddSeconds(30),
					claims: authClaims,
					signingCredentials: new SigningCredentials(authSigningKey, SecurityAlgorithms.HmacSha256)
					);

				return Ok(new
				{
					token = new JwtSecurityTokenHandler().WriteToken(token),
					expiration = token.ValidTo
				});
			}

			return Unauthorized();
		}

			[HttpPost]
			[Route("register")]
			public async Task<IActionResult> RegisterAdmin(Register registerModel)
			{
				var userExists = await userManager.FindByNameAsync(registerModel.UserName);
				if (userExists != null)
					return StatusCode(StatusCodes.Status500InternalServerError, new Response { Status = "Error", Message = "User already exists!" });

				IdentityUser user = new IdentityUser()
				{
					Email = registerModel.Email,
					SecurityStamp = Guid.NewGuid().ToString(),
					UserName = registerModel.UserName
				};

				// Create user
				var result = await userManager.CreateAsync(user, registerModel.Password);
				if (!result.Succeeded)
					return StatusCode(StatusCodes.Status500InternalServerError, new Response { Status = "Error", Message = "User creation failed! Please check user details and try again." });

				// Checking roles in database and creating if not exists
				if (!await roleManager.RoleExistsAsync(ApplicationUserRoles.Admin))
					await roleManager.CreateAsync(new IdentityRole(ApplicationUserRoles.Admin));
				if (!await roleManager.RoleExistsAsync(ApplicationUserRoles.User))
					await roleManager.CreateAsync(new IdentityRole(ApplicationUserRoles.User));

				// Add role to user
				if (!string.IsNullOrEmpty(registerModel.Role) && registerModel.Role == ApplicationUserRoles.Admin)
				{
					await userManager.AddToRoleAsync(user, ApplicationUserRoles.Admin);
				}
				else
				{
					await userManager.AddToRoleAsync(user, ApplicationUserRoles.User);
				}

			var player = new Player()
			{
				UserId = user.Id,
				Name = user.UserName
				};

				await databaseContext.AddAsync(player);
				await databaseContext.SaveChangesAsync();

				return Ok(new Response { Status = "Success", Message = "Player created successfully!" });
			}
		}
	
}
