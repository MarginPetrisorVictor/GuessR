@using GuessR.Data;
@model GuessR.Models.Player
@inject ApplicationDbContext databaseContext
@{
    ViewData["Title"] = "GameOver";
}

<h2>Game Over</h2>

<p>Your score: @ViewBag.Score</p>
@if(User.Identity.IsAuthenticated){
    var userName = User.Identity?.Name;
    var player = databaseContext.Players.FirstOrDefault(p => p.Name == userName); //verific Player-ul care are acelasi nume in contul inregistrat pe platforma.
    
    if (player != null)
    {
        player.Score = ViewBag.Score;
        player.TotalPlayedGames += 1;
        player.TotalScore += player.Score;
        player.SuccessPercentage = (player.TotalScore / (double)(player.TotalPlayedGames * 5)) * 100;
        
        var allPlayers = databaseContext.Players.OrderByDescending(p => p.TotalScore).ToList();
        int lowerScorePlayerIndex = -1; // initialize index
        int newRank = -1; // initialize rank
        int initial_index = -1;

        // Find the index of the first player with a lower total score
        for (int i = 0; i < allPlayers.Count; i++)
        {
            if(allPlayers[i] == player)
            {
                initial_index = i;
            }
        }

        for (int i = 0; i < allPlayers.Count; i++)
        {
            if (allPlayers[i].TotalScore < player.TotalScore)
            {
                lowerScorePlayerIndex = i;
                i = allPlayers.Count + 1; // iesi din for
            }
        }

        if (lowerScorePlayerIndex != -1)
        {
            // Get the rank of the player with the lowest rank among those with the same TotalScore
            var lowerScorePlayers = allPlayers.Where(p => p.TotalScore == allPlayers[lowerScorePlayerIndex].TotalScore).ToList();
            newRank = lowerScorePlayers.Min(p => p.Rank);
        }
        else
        {
            // No player has a lower score, so the current player gets the highest rank
            newRank = 1;
        }

        // Update the current player's rank
        player.Rank = newRank;

        // Update the ranks for the players after the current player
        foreach (var p in allPlayers.Where(p => p.Rank >= newRank && p.Rank<=initial_index && p != player && p.Rank < allPlayers.Count))
        {
            p.Rank += 1;
        }
        }

    // Update the player in the database
    if (player != null)
    {
        databaseContext.Players.Update(player);
        databaseContext.SaveChanges();
    }
}

<a asp-controller="Home" asp-action="Index" class="btn btn-primary">Go Back to Home Page</a>
@*<a asp-controller="Guess" asp-action="Game" class="btn btn-primary">Play Again</a>*@